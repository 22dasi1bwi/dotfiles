[user]
	name = Silvio D'Alessandro
	email = silvio.dalessandro@novatec-gmbh.de
[core]
	editor = vim
[merge]
    tool = mymeld
	conflictstyle = diff3	
	keepBackup=false
[alias]
	aa = add . # adding all files to the stage
	ac = !git add . && git commit -am # adding all files to the stage and open the commit message dialog
	br = branch # BRANCH shortcut 
	ci = commit # COMMIT shortcut
	clean-merged = !git branch --merged | grep -v \"\\*\" | xargs -n 1 git branch -d # DELETE all local branches which are not yet integrated into master
	clf = clean -f # DELETE all files forced
	cmr = !sh -c 'git fetch $1 merge-requests/$2/head:mr-$1-$2 && git checkout mr-$1-$2' - # CHECKOUT a MR from a repository ($1) with a specific number ($2)
	co = checkout # CHECKOUT shortcut
	cob = checkout -b  # CHECKOUT a new branch
	com = checkout master # CHECKOUT the master branch
	cp = cherry-pick # CHERRY-PICK shortcut
	df = log --diff-filter=D --summary # SUMMARY of all deleted files in the given hash
	dist = diff --staged # SHOW all changes which are in the staging area
	fe = fetch # FETCH shortcut
	feo = fetch origin # FETCH from the standard repository 'origin'
	fea = fetch azure # FETCH from repository 'azure'
	p = pull # PULL shortcut
	pmr = !sh -c 'git pull $1 refs/merge-requests/$2/head' - # PULL the changes from an existing repository ($1) and branch ($2)
	pu = push # PUSH shortcut
	rb = rebase # REBASE shortcut
	rbm = rebase origin/master # REBASE shortcut for origin/master branch
	re = reset # RESET shortcut
	reh = !sh -c 'git reset HEAD~$1' - # soft RESET the current commit
	rev = !sh -c 'git show $1 -- $2 | git apply -R' - # soft REVERT of changes to a file already commited, where $1 is the hash and $2 is the file
	rl = ref log # REFLOG shortcut
	st = status # STATUS shortcut

[color]
	diff = auto
	status = auto
	branch = auto
	interactive = auto
	pager = true
	ui = true

[mergetool "mymeld"]
	cmd = meld --diff $BASE $LOCAL --diff $BASE $REMOTE --diff $LOCAL $BASE $REMOTE $MERGED
